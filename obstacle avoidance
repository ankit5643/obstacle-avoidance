//#include "C:\Users\ankit\Documents\Arduino\libraries\mavlink\common\mavlink.h"  // Please change this path as in your system
//I am using mavlink library
// I am using IRremote library for infrared sensors
/* #define UNKNOWN 0
#define NEC 1
#define SONY 2
#define RC5 3
#define RC6 4
#define PANASONIC_OLD 5
#define JVC 6
#define NECX 7
#define SAMSUNG36 8
#define GICABLE 9 
#define DIRECTV 10
#define RCMM 11 */ IRLib supports 11 protocols directly and may include example code on how to implement others.

#include <IRLibProtocols.h> for protocols
#include <IRLibAll.h> for infrared sensors
#include <SoftwareSerial.h> // Facilitates communication b/w Arduino and flight controller we are usnig
#define MAX_DISTANCE  70 // maximum distance form obstacle in cm

//======================= Recieving and Decoding IR =========================//
//Create a receiver object to listen on pin 2
IRrecvPCI myReceiver(2);

//Create a decoder object 
IRdecode myDecoder;   

void setup() {
  Serial.begin(9600);
  delay(2000); while (!Serial); //delay for Leonardo
  myReceiver.enableIRIn(); // Start the receiver
  Serial.println(F("Ready to receive IR signals"));
}

void loop() {
  //Continue looping until you get a complete signal received
  if (myReceiver.getResults()) {
    myDecoder.decode();           //Decode it
    myDecoder.dumpResults(true);  //Now print results. Use false for less detail
    myReceiver.enableIRIn();      //Restart receiver
  }
}
//======================= GPIO pins intialization =========================//
SoftwareSerial mySerial(10, 11); /// RX, TX
recvGlobal sonar_B(3, 3, MAX_DISTANCE);
recvGlobal sonar_F(4, 4, MAX_DISTANCE);


//======================= Intitialize variables =========================//
unsigned long HeartbeatTime = 0;
int OUTPUT_PITCH = 0;
int TRIG_PITCH = 0;
int FRONT_SENSOR = 0;
int BACK_SENSOR = 0;
int PITCH_BACK = 0;
int PITCH_FRONT = 0;


void setup() {
  Serial.begin(9600);
  mySerial.begin(57600);
}


void loop() {
  if ( (millis() - HeartbeatTime) > 1000 ) {//1000 is the minimum pitch of the system
    HeartbeatTime = millis();
    PIX_HEART_BEAT();//checks if the flight controller is working or not
  } 
  recvGlobal.front()+recvGlobal.back()=TRIG_PITCH; // Checks the overall Pitch to confirm if obstacle is detetcted at either side of the drone !
  recvGlobal.front()=FRONT_SENSOR; //distance in cm // Gets's the distance from front facing sensor 
  recvGlobal.back()=BACK_SENSOR; //distance in cm // Gets's the distance from back facing sensor 
  OUTPUT_DATA();
}

/*
//======================= Sends data to Mavlink =========================//  
uint8_t N = 0;
void OUTPUT_DATA() {
  CALCULATE_PITCH();
  SEND_DATA(OUTPUT_PITCH); 
}




// Since we can't pass the values that we get from the sensors directly
// I have devised this formula to calculate the PITCH-BACK and FRONT accordingly
// The idea is, when an object is detected the distance is sent to function CALCULATE_PITCH(), which does the calculation of increasing the pitch values and decreasing it as values inputted from sensor.

*/



//======================= Calculation for PITCH =========================//
void CALCULATE_PITCH(){
// Checks if sensor value is less than 70cm and is not equal to Zero.
    if (BACK_SENSOR != 0 && BACK_SENSOR < MAX_DISTANCE) {
       PITCH_FRONT = 1500-30-((70-BACK_SENSOR)*6); // 1500 = Mid Term, 30 = intital increment when object detetcted at 69cm, 70 = MAX_DISTANCE, PITCH_F = Distance calculated by the sensor, 6 = increment value by mutiple of 6  
       OUTPUT_PITCH = PITCH_FRONT;
//       Serial.print(PITCH_FRONT);
//       Serial.println("cm");
    }
    else if (FRONT_SENSOR != 0 && FRONT_SENSOR < MAX_DISTANCE){
       PITCH_BACK = 1500+30+((70-FRONT_SENSOR)*6);// we can change 6, and make it as we desire
       OUTPUT_PITCH = PITCH_BACK;
//       Serial.print(PITCH_BACK);
//       Serial.println("cm");
    }
    else {
      OUTPUT_PITCH = 1500;
    }
}

//============================ADC PIN==================================//
//Arduino Code for reading analog value

int sensorPin = A0;  // input pin for the potentiometer
int digitalValue = 0;// variable to store the value coming from the sensor

void setup() {
  Serial.begin(9600);
}

void loop() {
  digitalValue = analogRead(sensorPin);// read the value from the analog channel
  Serial.print("digital value = ");
  Serial.println(digitalValue);        //print digital value on serial monitor
  delay(1000);
}

//Code for Read Analog Voltage using Arduino

int sensorPin = A0;   // select the input pin for the potentiometer
int digitalValue = 0;  // variable to store the value coming from the sensor
float analogVoltage = 0.00;

void setup() {
  Serial.begin(9600);
}

void loop() {
  digitalValue = analogRead(sensorPin);// read the value from the analog channel
  Serial.print("digital value = ");
  Serial.print(digitalValue);        //print digital value on serial monitor
  //convert digital value to analog voltage
  analogVoltage = (digitalValue * 5.00)/1023.00;
  Serial.print("  analog voltage = ");
  Serial.println(analogVoltage);
  delay(1000);
}

/*
//============================MAVLINK COMMAND==========================//
mavlink_message_t msg;
uint8_t buf[MAVLINK_MAX_PACKET_LEN];
uint16_t len;
 
void PIX_HEART_BEAT() {
  mavlink_msg_heartbeat_pack(255, 0, &msg, MAV_TYPE_QUADROTOR, MAV_AUTOPILOT_GENERIC, 0, 1, 0);    // System ID = 255 = GCS
  len = mavlink_msg_to_send_buffer(buf, &msg);

  mySerial.write(buf, len);
}

void SEND_DATA(int P) {

    if (TRIG_PITCH != 0){
    mavlink_msg_rc_channels_override_pack(255, 0 , &msg, 1, 0, 0, P, 0, 0, 0, 0, 0, 0);    // CHANNEL = 1(ROLL), 2(PITCH), 3(Throttle), 4(Yaw) , 5, 6, 7, 8
    len = mavlink_msg_to_send_buffer(buf, &msg);// it will make sure that if obstacle is detected, user does not have control over pitch control
    }
    else{
    mavlink_msg_rc_channels_override_pack(255, 0 , &msg, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0);    // CHANNEL = 1(ROLL), 2(PITCH), 3(Throttle), 4(Yaw) , 5, 6, 7, 8
    len = mavlink_msg_to_send_buffer(buf, &msg);// if obstacle is not detected, user can have control over the pitch
    }
      
  mySerial.write(buf, len);
}
*/
